// Importar el repositorio y el modelo de pa칤s
const paisRepository = require('../../repositories/pais/paisRepository');
const Pais = require('../../models/pais/paisModel');
const busquedaRepository = require('../../repositories/pais/busquedaRepository');

/**
 * @file Servicio para manejar la l칩gica de negocio relacionada con pa칤ses.
 * Encapsula operaciones como obtener pa칤ses, gestionar favoritos y agrupar por regi칩n.
 * 
 * @module paisService
 */

/**
 * Obtiene la informaci칩n detallada de un pa칤s desde la API externa REST Countries.
 * Devuelve una instancia del modelo `Pais`.
 * 
 * @async
 * @param {string} nombre - Nombre del pa칤s a consultar.
 * @returns {Promise<Pais>} Instancia del pa칤s encontrado.
 * @throws {Error} Si ocurre un error o el pa칤s no es encontrado.
 */
exports.obtenerPais = async (nombre) => {
  try {
    const pais = await paisRepository.obtenerPais(nombre); // Esto ya es instancia de Pais

    // registrar b칰squeda y ranking
    busquedaRepository.registrarBusqueda(pais);
    busquedaRepository.actualizarRanking(pais);

    return pais;
  } catch (error) {
    throw new Error(`Error al obtener pa칤s: ${error.message}`);
  }
};

/**
 * Agrega un pa칤s a la lista de favoritos despu칠s de obtenerlo y validarlo.
 * 
 * @async
 * @param {string} nombre - Nombre del pa칤s a agregar como favorito.
 * @returns {Promise<Pais>} Pa칤s guardado como favorito.
 * @throws {Error} Si el pa칤s est치 en lista negra o ya es favorito.
 */
exports.agregarFavorito = async (nombre) => {
  try {
    const pais = await paisRepository.obtenerPais(nombre);
    return await paisRepository.guardarFavorito(pais);
  } catch (error) {
    // 游녤 Si el error es "Pa칤s no encontrado", asigna c칩digo 404
    if (error.message.includes('Pa칤s no encontrado')) {
      error.status = 404;
    }
    throw error;
  }
};

/**
 * Obtiene todos los pa칤ses favoritos y los agrupa por regi칩n.
 * 
 * @async
 * @returns {Promise<Object>} Objeto con claves por regi칩n y arrays de nombres de pa칤ses.
 * @example
 * {
 *   "Americas": ["Chile", "Argentina"],
 *   "Europe": ["Germany"]
 * }
 */
exports.obtenerFavoritosAgrupados = async () => {
  const favoritos = await paisRepository.obtenerFavoritos(); // Array de Pais

  return favoritos.reduce((acc, pais) => {
    const region = pais.region || 'Sin Regi칩n';
    if (!acc[region]) acc[region] = [];
    acc[region].push(pais.nombre);
    return acc;
  }, {});
};

/**
 * Elimina un pa칤s favorito por nombre.
 * 
 * @async
 * @param {string} nombre - Nombre del pa칤s a eliminar.
 * @returns {Promise<boolean>} True si se elimin칩, False si no exist칤a.
 */
exports.eliminarFavorito = async (nombre) => {
  return await paisRepository.eliminarFavorito(nombre);
};
